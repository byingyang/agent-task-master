/**
 * mcp-server/src/core/direct-functions/save-subtasks.js
 * Direct function wrapper to save subtasks generated by expand-task.
 */

import { readJSON, writeJSON } from '../../../../scripts/modules/utils.js';
import { generateTaskFilesDirect } from './generate-task-files.js'; // Assuming we want to regenerate files
import path from 'path';

/**
 * Saves generated subtasks to the parent task in tasks.json.
 *
 * @param {Object} args - Arguments object.
 * @param {string} args.tasksJsonPath - Absolute path to the tasks.json file.
 * @param {string} args.projectRoot - Absolute path to the project root.
 * @param {string|number} args.taskId - ID of the parent task.
 * @param {Array<Object>} args.subtasks - Array of subtask objects to save.
 * @param {boolean} [args.force=false] - Whether to overwrite existing subtasks.
 * @param {Object} log - Logger object.
 * @returns {Promise<Object>} - Standard success/error object.
 */
export async function saveSubtasksDirect(args, log) {
    const { tasksJsonPath, projectRoot, taskId, subtasks, force = false } = args;

    if (!tasksJsonPath || !projectRoot || taskId === undefined || !Array.isArray(subtasks)) {
        const message = 'Missing required arguments: tasksJsonPath, projectRoot, taskId, or subtasks array.';
        log.error(message);
        return { success: false, error: { code: 'MISSING_ARGS', message } };
    }

    log.info(`Saving ${subtasks.length} subtasks for parent task ID ${taskId} to ${tasksJsonPath}`);

    try {
        // Read existing tasks data
        const existingTasksData = readJSON(tasksJsonPath);
        if (!existingTasksData || !Array.isArray(existingTasksData.tasks)) {
            throw new Error('Failed to read or parse existing tasks.json.');
        }

        // Find the parent task
        const parentTaskIndex = existingTasksData.tasks.findIndex(t => String(t.id) === String(taskId));
        if (parentTaskIndex === -1) {
            throw new Error(`Parent task with ID ${taskId} not found.`);
        }

        const parentTask = existingTasksData.tasks[parentTaskIndex];

        // Check if parent already has subtasks and if force flag is set
        if (parentTask.subtasks && parentTask.subtasks.length > 0 && !force) {
            const message = `Task ${taskId} already has subtasks. Use the --force flag in the expand command to overwrite.`;
            log.warn(message);
            // Return success but indicate no changes were made due to existing subtasks without force
            // Or potentially return an error? Let's return success with a message for now.
            return { success: true, data: { message: `No changes made: ${message}` }, skipped: true }; 
        }

        // Assign/Overwrite subtasks
        parentTask.subtasks = subtasks.map((sub, index) => ({ 
            ...sub, 
            id: index + 1 // Ensure subtask IDs are sequential starting from 1
        }));
        log.info(`Assigned ${parentTask.subtasks.length} new subtasks to task ${taskId}. Force flag: ${force}`);

        // Update the task in the array
        existingTasksData.tasks[parentTaskIndex] = parentTask;

        // Write the updated data back
        writeJSON(tasksJsonPath, existingTasksData);
        log.info(`Successfully saved subtasks for task ${taskId}.`);

        // Regenerate task files
        try {
            log.info('Regenerating individual task files...');
            const outputDir = path.dirname(tasksJsonPath);
            const generateArgs = { tasksJsonPath, output: outputDir, projectRoot };
            await generateTaskFilesDirect(generateArgs, log);
            log.info('Successfully regenerated task files.');
        } catch (genError) {
            log.warn(`Failed to regenerate task files after saving subtasks: ${genError.message}`);
        }

        return { success: true, data: { message: `Successfully saved ${subtasks.length} subtasks for task ${taskId}.` } };

    } catch (error) {
        log.error(`Error saving subtasks for task ${taskId}: ${error.message}`);
        log.error(error.stack); // Log stack for debugging
        return { success: false, error: { code: 'SAVE_SUBTASK_ERROR', message: `Failed to save subtasks: ${error.message}` } };
    }
} 